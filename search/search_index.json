{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hurry The (cross-platform) SysAdmin's tool to get repetitive things done Fast. More screenshots Installation and configuration Download latest builds Windows Release Linux Release (Not available yet. Fill an issue if interested or ask on Discord ) Initial Configuration Run the freshly downloaded Hurry setup and then start Hurry. It will prompt you with a First Configuration screen. Click on the Submit button at the bottom of the configuration screen and you are done. Install plugins To be able to work with some data you need plugins . For this purpose, use the Plugin Installer from File > Install Plugin After searching for a plugin name or hitting Enter , a list of available plugins will be displayed. To practice with an example dataset, you can install hurry-json-array-datasource by selecting it and click on the Download button. When the installation is done, click on the Reload application Menu so the plugin get initialized or restart the application. You should now be able to do a search against this new datasource by selecting it from the search button arrow button Manual builds Follow this page describing how to build from the sources Prerequisites To be able to use most of Hurry's features, you will need a recent version or Powershell . For Linux users, get it from here Project description Check out the GUI Overview with screenshots Hurry's is to allow command-line gurus to share their work with users who prefer GUIs. It was first released as a tool for support teams. I was often creating Powershell scripts to solve enterprise-wide issues. When a user was calling the helpdesk, we had to ask for their computer name, etc to then execute my scripts remotely using WinRM or psexec. Now with Hurry, I can embed my script within a contextual menu, helpdesk team just have to search for a specific user, click on its computer in the search result grid and choose the right action to perform on its computer from a contextual menu. Since its beginning, we have extended its use so that : it can quickly interface with new datasources menu actions can use variables interpolated from contextual data gathered from the properties available within datasource records. a plugin system lets you drive most of the application (adding new Views, updating menu content, adding datasource, new shells, etc.) still WIP. Source code This project has been build with the great electron-react-ts-boilerplate project (based on Electron Forge ). Thanks to this project, we can concentrate on coding an Electron Application with a React JS front end. The included Webpack configuration allow using both Javascript ( .js, .jsx) and Typescript ( .ts, .tsx). It enables to use: - React + Typescript for UI part - Typescript for backend process part - Jest for unit tests It includes an example of communication between UI and Main processes (ipcRenderer and ipcMain). This example is currently not used at all. Support For any bug, questions on how to do I use, or features additions, feel free to create an issue A Discord server is available here to live chat, ask questions, give your opinion on the project : lets meet there License LGPL","title":"Home"},{"location":"#hurry","text":"The (cross-platform) SysAdmin's tool to get repetitive things done Fast. More screenshots","title":"Hurry"},{"location":"#installation-and-configuration","text":"","title":"Installation and configuration"},{"location":"#download-latest-builds","text":"Windows Release Linux Release (Not available yet. Fill an issue if interested or ask on Discord )","title":"Download latest builds"},{"location":"#initial-configuration","text":"Run the freshly downloaded Hurry setup and then start Hurry. It will prompt you with a First Configuration screen. Click on the Submit button at the bottom of the configuration screen and you are done.","title":"Initial Configuration"},{"location":"#install-plugins","text":"To be able to work with some data you need plugins . For this purpose, use the Plugin Installer from File > Install Plugin After searching for a plugin name or hitting Enter , a list of available plugins will be displayed. To practice with an example dataset, you can install hurry-json-array-datasource by selecting it and click on the Download button. When the installation is done, click on the Reload application Menu so the plugin get initialized or restart the application. You should now be able to do a search against this new datasource by selecting it from the search button arrow button","title":"Install plugins"},{"location":"#manual-builds","text":"Follow this page describing how to build from the sources","title":"Manual builds"},{"location":"#prerequisites","text":"To be able to use most of Hurry's features, you will need a recent version or Powershell . For Linux users, get it from here","title":"Prerequisites"},{"location":"#project-description","text":"Check out the GUI Overview with screenshots Hurry's is to allow command-line gurus to share their work with users who prefer GUIs. It was first released as a tool for support teams. I was often creating Powershell scripts to solve enterprise-wide issues. When a user was calling the helpdesk, we had to ask for their computer name, etc to then execute my scripts remotely using WinRM or psexec. Now with Hurry, I can embed my script within a contextual menu, helpdesk team just have to search for a specific user, click on its computer in the search result grid and choose the right action to perform on its computer from a contextual menu. Since its beginning, we have extended its use so that : it can quickly interface with new datasources menu actions can use variables interpolated from contextual data gathered from the properties available within datasource records. a plugin system lets you drive most of the application (adding new Views, updating menu content, adding datasource, new shells, etc.) still WIP.","title":"Project description"},{"location":"#source-code","text":"This project has been build with the great electron-react-ts-boilerplate project (based on Electron Forge ). Thanks to this project, we can concentrate on coding an Electron Application with a React JS front end. The included Webpack configuration allow using both Javascript ( .js, .jsx) and Typescript ( .ts, .tsx). It enables to use: - React + Typescript for UI part - Typescript for backend process part - Jest for unit tests It includes an example of communication between UI and Main processes (ipcRenderer and ipcMain). This example is currently not used at all.","title":"Source code"},{"location":"#support","text":"For any bug, questions on how to do I use, or features additions, feel free to create an issue A Discord server is available here to live chat, ask questions, give your opinion on the project : lets meet there","title":"Support"},{"location":"#license","text":"LGPL","title":"License"},{"location":"GUI_Overview/","text":"Main Menu Hurry's main goal is to provide the ability to do actions on datasource results . When you start the application, you have a search bar and an history panel on its right After entering a search keyword, you can select on which datasource you want to search for by clicking on the arrow on the button's left side. After clicking on the search button, a list of datasource results will be displayed. If applicable, hurry will try to ping hosts displayed in the result area. The datasource result will be displayed in green or red so you can quickly know which host is up or not. A click on a datasource result will display a contextual menu which will offer the ability to apply actions on this specific datasource result . Each action are just a simple command that hurry will type within a shell (currently supported shells are cmd , powershell , sh ) for you. Commands are generated using a command template using variables that Hurry will translate depending on the datasource result . For instance, the Ping command template can be defined this way : On Win32 platform, the following command will be run within a cmd.exe process : start \\\"ping -t #{hostname}\\\" ping -t #{hostname} On Linux systems, clicking on the Ping action will execute : xterm -e \\\"ping #{hostname}\\\" One of Hurry's goals is to be cross platform. For this reason, each menu action will be defined with platform specifics commands. Here is an example of the Ping action full definition (Hurry has a build-in menu editor so you might not need to do such type of edition) { \"caption\" : \"Network\" , \"type\" : \"CONTAINER\" , \"children\" : [ { \"description\" : \"Do a simple ping on specific host\" , \"caption\" : \"Ping\" , \"shell\" : \"cmd\" , \"type\" : \"COMMAND\" , \"platform\" : \"win32\" , \"commands\" : [ \"start \\\"ping -t #{hostname}\\\" ping -t #{hostname}\" ] }, { \"description\" : \"Do a simple ping on specific host\" , \"caption\" : \"Ping\" , \"shell\" : \"bash\" , \"type\" : \"COMMAND\" , \"platform\" : \"linux\" , \"commands\" : [ \"xterm -e \\\"ping #{hostname}\\\"\" ] }, ] } To understand how commands are executed by Hurry, a process console is available at the bottom of the app for the most curious users. So you can improve your skills or reuse commands that hurry runs for you.","title":"GUI Overview"},{"location":"GUI_Overview/#main-menu","text":"Hurry's main goal is to provide the ability to do actions on datasource results . When you start the application, you have a search bar and an history panel on its right After entering a search keyword, you can select on which datasource you want to search for by clicking on the arrow on the button's left side. After clicking on the search button, a list of datasource results will be displayed. If applicable, hurry will try to ping hosts displayed in the result area. The datasource result will be displayed in green or red so you can quickly know which host is up or not. A click on a datasource result will display a contextual menu which will offer the ability to apply actions on this specific datasource result . Each action are just a simple command that hurry will type within a shell (currently supported shells are cmd , powershell , sh ) for you. Commands are generated using a command template using variables that Hurry will translate depending on the datasource result . For instance, the Ping command template can be defined this way : On Win32 platform, the following command will be run within a cmd.exe process : start \\\"ping -t #{hostname}\\\" ping -t #{hostname} On Linux systems, clicking on the Ping action will execute : xterm -e \\\"ping #{hostname}\\\" One of Hurry's goals is to be cross platform. For this reason, each menu action will be defined with platform specifics commands. Here is an example of the Ping action full definition (Hurry has a build-in menu editor so you might not need to do such type of edition) { \"caption\" : \"Network\" , \"type\" : \"CONTAINER\" , \"children\" : [ { \"description\" : \"Do a simple ping on specific host\" , \"caption\" : \"Ping\" , \"shell\" : \"cmd\" , \"type\" : \"COMMAND\" , \"platform\" : \"win32\" , \"commands\" : [ \"start \\\"ping -t #{hostname}\\\" ping -t #{hostname}\" ] }, { \"description\" : \"Do a simple ping on specific host\" , \"caption\" : \"Ping\" , \"shell\" : \"bash\" , \"type\" : \"COMMAND\" , \"platform\" : \"linux\" , \"commands\" : [ \"xterm -e \\\"ping #{hostname}\\\"\" ] }, ] } To understand how commands are executed by Hurry, a process console is available at the bottom of the app for the most curious users. So you can improve your skills or reuse commands that hurry runs for you.","title":"Main Menu"},{"location":"How_to_build/","text":"Manual Build Prerequisites a Recent version of NodeJS Yarn package manager (equivalent of npm) Installation Clone this repository using common git clone command : git clone https://github.com/rebrec/hurry yarn install Linux After cloning the repository You will have to run the program as root (for now) to be able to create raw packets to send icmp packets to check hosts availability. To start the project, run the following command: sudo $(which node) $(which yarn) startroot I was expecting to make it work without root privileges using network capabilities but it seems to not work properly with electron. I have currently tried this (but it's not working) : sudo setcap cap_net_admin,cap_net_raw,cap_net_bind_service=+eip node_modules/electron/dist/electron Then to prevent electron from complaining it cannot load xxxxxx, you will have to add the path to this library to a specific ld.conf configuration file # cd to your project's root # become root sudo -s # create file cat >/etc/ld.so.conf.d/electron.conf < <EOF ${PWD}/node_modules/electron/dist/ EOF #update configuration ldconfig # go back as user exit If you don't want to add specific capabilities, you can still run this project as root user but it is strongly NOT RECOMMENDED. Windows Like for Linux, under Windows, electron will need to be run in a priviledged UAC environment so that it can create raw icmp packet to send ping requests to check hosts availability. This is done by default when running the dev environment with yarn start but in production, you may need to right click on the program and select Run as Administrator","title":"Manual Build"},{"location":"How_to_build/#manual-build","text":"","title":"Manual Build"},{"location":"How_to_build/#prerequisites","text":"a Recent version of NodeJS Yarn package manager (equivalent of npm)","title":"Prerequisites"},{"location":"How_to_build/#installation","text":"Clone this repository using common git clone command : git clone https://github.com/rebrec/hurry yarn install","title":"Installation"},{"location":"How_to_build/#linux","text":"After cloning the repository You will have to run the program as root (for now) to be able to create raw packets to send icmp packets to check hosts availability. To start the project, run the following command: sudo $(which node) $(which yarn) startroot I was expecting to make it work without root privileges using network capabilities but it seems to not work properly with electron. I have currently tried this (but it's not working) : sudo setcap cap_net_admin,cap_net_raw,cap_net_bind_service=+eip node_modules/electron/dist/electron Then to prevent electron from complaining it cannot load xxxxxx, you will have to add the path to this library to a specific ld.conf configuration file # cd to your project's root # become root sudo -s # create file cat >/etc/ld.so.conf.d/electron.conf < <EOF ${PWD}/node_modules/electron/dist/ EOF #update configuration ldconfig # go back as user exit If you don't want to add specific capabilities, you can still run this project as root user but it is strongly NOT RECOMMENDED.","title":"Linux"},{"location":"How_to_build/#windows","text":"Like for Linux, under Windows, electron will need to be run in a priviledged UAC environment so that it can create raw icmp packet to send ping requests to check hosts availability. This is done by default when running the dev environment with yarn start but in production, you may need to right click on the program and select Run as Administrator","title":"Windows"},{"location":"datasources/Readme/","text":"Datasources Datasources are one of the main component of Hurry. They provide data hurry as a result to a search query. The provided results can then be displayed and used to send specific commands through the Menu. Module structure The entrypoint of each Module, as a Datasource is, is a file called index.js . This file must currently be in form of an ES5 Syntax. In some future, ES6 support may be supported if people ask for it.","title":"Datasources"},{"location":"datasources/Readme/#datasources","text":"Datasources are one of the main component of Hurry. They provide data hurry as a result to a search query. The provided results can then be displayed and used to send specific commands through the Menu.","title":"Datasources"},{"location":"datasources/Readme/#module-structure","text":"The entrypoint of each Module, as a Datasource is, is a file called index.js . This file must currently be in form of an ES5 Syntax. In some future, ES6 support may be supported if people ask for it.","title":"Module structure"},{"location":"guides/getting-started/install-a-plugin/install-a-plugin/","text":"Install a plugin Overview Plugins are what makes hurry useful. After a fresh installation, you won't be able to do anything useful until you install a plugin Plugins provide new capabilities to Hurry, such as : a new Datasource to search for some Actions to perform on search results through the use of the Context Menu create a new View to display some other information etc. The goal of the plugin system is to let everyone improve Hurry by adding new features to it. Installing a plugin Plugin installation is made by using the Plugin Installer . This feature allows you to : Search for available plugins Download them and install them To launch it, click on the File menu and select Install plugin Enter a search keyword and click on the magnifying glass button to start listing plugins. Then Select on of the desired plugins in the displayed results to get more information on this particular plugin. Finally, click on the Download button to start the installation process. Use the new plugin Before being able to use freshly installed plugins, you will have to either click on the Reload menu or restart Hurry. You may also need to configure some plugin options for it to work properly. So don't forget to check within File > Settings menu if there is a sections with your plugin's name.","title":"Install a plugin"},{"location":"guides/getting-started/install-a-plugin/install-a-plugin/#install-a-plugin","text":"","title":"Install a plugin"},{"location":"guides/getting-started/install-a-plugin/install-a-plugin/#overview","text":"Plugins are what makes hurry useful. After a fresh installation, you won't be able to do anything useful until you install a plugin Plugins provide new capabilities to Hurry, such as : a new Datasource to search for some Actions to perform on search results through the use of the Context Menu create a new View to display some other information etc. The goal of the plugin system is to let everyone improve Hurry by adding new features to it.","title":"Overview"},{"location":"guides/getting-started/install-a-plugin/install-a-plugin/#installing-a-plugin","text":"Plugin installation is made by using the Plugin Installer . This feature allows you to : Search for available plugins Download them and install them To launch it, click on the File menu and select Install plugin Enter a search keyword and click on the magnifying glass button to start listing plugins. Then Select on of the desired plugins in the displayed results to get more information on this particular plugin. Finally, click on the Download button to start the installation process.","title":"Installing a plugin"},{"location":"guides/getting-started/install-a-plugin/install-a-plugin/#use-the-new-plugin","text":"Before being able to use freshly installed plugins, you will have to either click on the Reload menu or restart Hurry. You may also need to configure some plugin options for it to work properly. So don't forget to check within File > Settings menu if there is a sections with your plugin's name.","title":"Use the new plugin"},{"location":"guides/getting-started/install-and-configure/install-and-configure/","text":"Download latest builds Windows Release Linux Release (Not available yet. Fill an issue if interested or ask on Discord ) Initial Configuration Run the freshly downloaded Hurry setup and then start Hurry. It will prompt you with a First Configuration screen. Click on the Submit button at the bottom of the configuration screen and you are done. The next step is to install a datasource by installing a Plugin","title":"Install and configure"},{"location":"guides/getting-started/install-and-configure/install-and-configure/#download-latest-builds","text":"Windows Release Linux Release (Not available yet. Fill an issue if interested or ask on Discord )","title":"Download latest builds"},{"location":"guides/getting-started/install-and-configure/install-and-configure/#initial-configuration","text":"Run the freshly downloaded Hurry setup and then start Hurry. It will prompt you with a First Configuration screen. Click on the Submit button at the bottom of the configuration screen and you are done. The next step is to install a datasource by installing a Plugin","title":"Initial Configuration"},{"location":"guides/plugins/first-plugin/first-plugin/","text":"Creation of your First plugin We will create a very simple Hello World plugin which will display Hello World when hurry start. The goal is mainly to demonstrate where to create the plugin, where to put the code and how to build the plugin. more complex examples will follow in this documentation. Plugin's ultimate goal is to be shareable. They can be published to the npm registry so that Hurry can easily find and install them. For a plugin to be published you will have to host it on a public git repository. We consider that you will know how to create a GitHub account and a new GitHub repository. Prerequisite To ease the publishing of plugins, we are used to use a command line tool used to interact with GitHub's API. This tool is called hub and can be downloaded from here It is not necessary to use it but will ease your daily life if you want to often create new GitHub repositories to hold your plugins's source code. Plugin location During development, you will create your custom plugins within the plugin-src subfolder at the root of Hurry source code. Each plugin is self-contained within a folder named as the plugin name. Choose a plugin Name You will first have to choose a plugin name . Published plugins are stored on the npmjs registry . Since this registry has a huge list of packages already available you may encounter a conflict when trying to publish your first plugin. To be able to share it with others, you will have to choose a unique name. For this purpose, a good idea is to prefix your plugin name with 'hurry-' . To have a list of already used plugins you can get a list from npmjs search engine For the current exercise we will name our plugin hurry-hello-world-plugin Structure creation Folder First, let's create our plugin's folder. From a command prompt, create a folder named hurry-hello-world-plugin within the plugin-src folder cd <HURRY_PROJECT_ROOT> cd plugin-src mkdir hurry-hello-world-plugin cd hurry-hello-world-plugin GitHub Repository Now create a repository to track our plugin's source code by going to this link : Enter the name of your plugin as a Repository name and click on Create repository button. Then initialize your empty repository and add the remote repository address echo \"# hurry-hello-world-plugin\" >> README.md git init echo \"node_modules\" >> .gitignore echo \".npm\" >> .gitignore echo \".config\" >> .gitignore git add README.md .gitignore git commit -m \"first commit\" git branch -M master git remote add origin git@github.com:rebrec/hurry-hello-world-plugin.git git push -u origin master Initialize the npm package Then initialize the npm package by using the command npm init You can answer most questions by just hitting Enter to choose default choice. Except for the below ones: Test: you must provide a test command whose return code is 0 when success. If you don't have unit tests yet, you can type exit 0 Keywords: you must provide at least the keyword hurry-admin-plugin . This required so that hurry's plugin install will be able to list this plugin as an available hurry plugin. Add the necessary node modules A few mandatory modules need to be added: hurry-plugin-definition : it will provide some necessary classes that your plugin will inherits. np : this package will make publishing your module easy. While not mandatory, you may consider installing it as a dev dependency even if you don't need it yet. Later you will be happy to have it already available. To read more about it have a look at the official page To install both of them, simply type the following : yarn add -D np yarn add hurry-plugin-definition Let's write the code! It's time to write the plugin's code. Create a file index.js within the plugin directory and write the following inside it: import Plugin from 'hurry-plugin-definition' export default class HelloWorldPlugin extends Plugin { constructor ( api , context ){ super ( api , context ); alert ( 'Hello World!' ); } } Build it To test our freshly created plugin we will have to build it. We provide a script to build plugins. This script will rebuilt plugins each time a file is modified so you can do live code. To run the script type the following from Hurry root folder (Please note that you must not type this command from the plugin directory!) yarn buildplugins There is currently no other way to stop this script so feel free to terminate it when needed by hitting Ctrl+C ! Run it It's time to run Hurry and test our new plugin. To run Hurry by typing yarn start from Hurry root folder (Please note again, that you must not type this command from the plugin directory!) After building it's stuff, Hurry will start and display a nice \"Hello World!\" alert message ! Congratulation! Your first Plugin works!. Save and Publish! Save Now that your plugin works, you may consider commiting your changes to your git repository. So from the plugin's directory enter: git add . git commit -m \"<ENTER HERE YOUR COMMIT MESSAGE\" git push origin master Publish Run yarn np --no-2fa from the plugin's directory and follow the instructions. The first time you run this command, you will have to login to the npm registry. If not done yet, you will need to create an account Each time you want to publish a new release of your plugin, you will just have to type the following commands: git add . git commit -m \"<ENTER HERE YOUR COMMIT MESSAGE\" git push origin master yarn np --no-2fa","title":"First Plugin"},{"location":"guides/plugins/first-plugin/first-plugin/#creation-of-your-first-plugin","text":"We will create a very simple Hello World plugin which will display Hello World when hurry start. The goal is mainly to demonstrate where to create the plugin, where to put the code and how to build the plugin. more complex examples will follow in this documentation. Plugin's ultimate goal is to be shareable. They can be published to the npm registry so that Hurry can easily find and install them. For a plugin to be published you will have to host it on a public git repository. We consider that you will know how to create a GitHub account and a new GitHub repository.","title":"Creation of your First plugin"},{"location":"guides/plugins/first-plugin/first-plugin/#prerequisite","text":"To ease the publishing of plugins, we are used to use a command line tool used to interact with GitHub's API. This tool is called hub and can be downloaded from here It is not necessary to use it but will ease your daily life if you want to often create new GitHub repositories to hold your plugins's source code.","title":"Prerequisite"},{"location":"guides/plugins/first-plugin/first-plugin/#plugin-location","text":"During development, you will create your custom plugins within the plugin-src subfolder at the root of Hurry source code. Each plugin is self-contained within a folder named as the plugin name.","title":"Plugin location"},{"location":"guides/plugins/first-plugin/first-plugin/#choose-a-plugin-name","text":"You will first have to choose a plugin name . Published plugins are stored on the npmjs registry . Since this registry has a huge list of packages already available you may encounter a conflict when trying to publish your first plugin. To be able to share it with others, you will have to choose a unique name. For this purpose, a good idea is to prefix your plugin name with 'hurry-' . To have a list of already used plugins you can get a list from npmjs search engine For the current exercise we will name our plugin hurry-hello-world-plugin","title":"Choose a plugin Name"},{"location":"guides/plugins/first-plugin/first-plugin/#structure-creation","text":"","title":"Structure creation"},{"location":"guides/plugins/first-plugin/first-plugin/#folder","text":"First, let's create our plugin's folder. From a command prompt, create a folder named hurry-hello-world-plugin within the plugin-src folder cd <HURRY_PROJECT_ROOT> cd plugin-src mkdir hurry-hello-world-plugin cd hurry-hello-world-plugin","title":"Folder"},{"location":"guides/plugins/first-plugin/first-plugin/#github-repository","text":"Now create a repository to track our plugin's source code by going to this link : Enter the name of your plugin as a Repository name and click on Create repository button. Then initialize your empty repository and add the remote repository address echo \"# hurry-hello-world-plugin\" >> README.md git init echo \"node_modules\" >> .gitignore echo \".npm\" >> .gitignore echo \".config\" >> .gitignore git add README.md .gitignore git commit -m \"first commit\" git branch -M master git remote add origin git@github.com:rebrec/hurry-hello-world-plugin.git git push -u origin master","title":"GitHub Repository"},{"location":"guides/plugins/first-plugin/first-plugin/#initialize-the-npm-package","text":"Then initialize the npm package by using the command npm init You can answer most questions by just hitting Enter to choose default choice. Except for the below ones: Test: you must provide a test command whose return code is 0 when success. If you don't have unit tests yet, you can type exit 0 Keywords: you must provide at least the keyword hurry-admin-plugin . This required so that hurry's plugin install will be able to list this plugin as an available hurry plugin.","title":"Initialize the npm package"},{"location":"guides/plugins/first-plugin/first-plugin/#add-the-necessary-node-modules","text":"A few mandatory modules need to be added: hurry-plugin-definition : it will provide some necessary classes that your plugin will inherits. np : this package will make publishing your module easy. While not mandatory, you may consider installing it as a dev dependency even if you don't need it yet. Later you will be happy to have it already available. To read more about it have a look at the official page To install both of them, simply type the following : yarn add -D np yarn add hurry-plugin-definition","title":"Add the necessary node modules"},{"location":"guides/plugins/first-plugin/first-plugin/#lets-write-the-code","text":"It's time to write the plugin's code. Create a file index.js within the plugin directory and write the following inside it: import Plugin from 'hurry-plugin-definition' export default class HelloWorldPlugin extends Plugin { constructor ( api , context ){ super ( api , context ); alert ( 'Hello World!' ); } }","title":"Let's write the code!"},{"location":"guides/plugins/first-plugin/first-plugin/#build-it","text":"To test our freshly created plugin we will have to build it. We provide a script to build plugins. This script will rebuilt plugins each time a file is modified so you can do live code. To run the script type the following from Hurry root folder (Please note that you must not type this command from the plugin directory!) yarn buildplugins There is currently no other way to stop this script so feel free to terminate it when needed by hitting Ctrl+C !","title":"Build it"},{"location":"guides/plugins/first-plugin/first-plugin/#run-it","text":"It's time to run Hurry and test our new plugin. To run Hurry by typing yarn start from Hurry root folder (Please note again, that you must not type this command from the plugin directory!) After building it's stuff, Hurry will start and display a nice \"Hello World!\" alert message ! Congratulation! Your first Plugin works!.","title":"Run it"},{"location":"guides/plugins/first-plugin/first-plugin/#save-and-publish","text":"","title":"Save and Publish!"},{"location":"guides/plugins/first-plugin/first-plugin/#save","text":"Now that your plugin works, you may consider commiting your changes to your git repository. So from the plugin's directory enter: git add . git commit -m \"<ENTER HERE YOUR COMMIT MESSAGE\" git push origin master","title":"Save"},{"location":"guides/plugins/first-plugin/first-plugin/#publish","text":"Run yarn np --no-2fa from the plugin's directory and follow the instructions. The first time you run this command, you will have to login to the npm registry. If not done yet, you will need to create an account Each time you want to publish a new release of your plugin, you will just have to type the following commands: git add . git commit -m \"<ENTER HERE YOUR COMMIT MESSAGE\" git push origin master yarn np --no-2fa","title":"Publish"},{"location":"guides/setup-the-build-environment/setup-the-build-environment/","text":"Setup your build environment If you wish to create your own plugin, or if you want to improve Hurry, you will have to setup a build environment. For this purpose, you will have to install differents elements that you may partially already have: Git : This is the tool in charge of handling code versioning on our project. Node.JS : this is the Javascript engine that will be in charge of running the core components of Hurry. Yarn package manager A recent version of Powershell : even if it's not mandatory, most actions performed by Hurry will execute Powershell scripts. If you don't have Powershell, most plugins you may try to use won't work properly. An IDE : even if it is not mandatory, most of us use an IDE, if you don't have one yet, you may give a try to Visual Studio Code (it's free, it's OpenSource, it looks pretty and it just work for coding in Node.js) Download Tools Download and install the following tools : Git NodeJS yarn Visual Studio Code Download the source code Click on the start menu and type Git CMD . This will open a command prompt where the git command is available. Go into your desired project's folder and type : git clone https://github.com/rebrec Install project's dependencies yarn install Build and Run yarn start Create your first plugin You may now try to create your first plugin","title":"Setup your build environment"},{"location":"guides/setup-the-build-environment/setup-the-build-environment/#setup-your-build-environment","text":"If you wish to create your own plugin, or if you want to improve Hurry, you will have to setup a build environment. For this purpose, you will have to install differents elements that you may partially already have: Git : This is the tool in charge of handling code versioning on our project. Node.JS : this is the Javascript engine that will be in charge of running the core components of Hurry. Yarn package manager A recent version of Powershell : even if it's not mandatory, most actions performed by Hurry will execute Powershell scripts. If you don't have Powershell, most plugins you may try to use won't work properly. An IDE : even if it is not mandatory, most of us use an IDE, if you don't have one yet, you may give a try to Visual Studio Code (it's free, it's OpenSource, it looks pretty and it just work for coding in Node.js)","title":"Setup your build environment"},{"location":"guides/setup-the-build-environment/setup-the-build-environment/#download-tools","text":"Download and install the following tools : Git NodeJS yarn Visual Studio Code","title":"Download Tools"},{"location":"guides/setup-the-build-environment/setup-the-build-environment/#download-the-source-code","text":"Click on the start menu and type Git CMD . This will open a command prompt where the git command is available. Go into your desired project's folder and type : git clone https://github.com/rebrec","title":"Download the source code"},{"location":"guides/setup-the-build-environment/setup-the-build-environment/#install-projects-dependencies","text":"yarn install","title":"Install project's dependencies"},{"location":"guides/setup-the-build-environment/setup-the-build-environment/#build-and-run","text":"yarn start","title":"Build and Run"},{"location":"guides/setup-the-build-environment/setup-the-build-environment/#create-your-first-plugin","text":"You may now try to create your first plugin","title":"Create your first plugin"}]}